#ConfigSubcommands:
enabledMessage = {0} are now &enabled&r. # 0 = (allow-warp-animations -> {Warp-animations} are now set to...)
disabledMessage = {0} are now &disabled&r.
trueSetMessage = {0} is now set to &true&r.
falseSetMessage = {0} is now set to &cfalse&r.
privatePublicError = &cYou cannot disable both private and public warps.
optionAlreadySet = &c{0} is already set to {1}! # 0 -> configKey 1 -> true/false
provideTrueFalse = &cPlease provide true/false!
configCommandUsage = Use: &b{0} # 0 -> getUsage()

#CooldownMessages:
provideNumber = &cPlease provide a number for the cooldown.
provideNumberGreater0 = &cPlease provide a number greater than 0.
provideCooldownTime = &cPlease provide a cooldown time.

#ConfigAllowAnimations:
animations-description = En-/Disables the warping animation.

#ConfigAllowGUIChat:
gUIChat-description = En-/Disables if players can open the GUI per chat. (Reload server for best experience)

#ConfigAllowPrivateRequests:
privateRequests-description = Allows/Not allows players to request the ownership of another player's private warp.

#ConfigAllowRequests:
requests-description = Allows/Not allows players to request the ownership of a warp.

#ConfigCrossdimensionalWarping:
allowCrossWarping-description = Allows/Not allows players to warp to warps that are in another dimension.

#ConfigDamageCooldown:
allowDamageCooldown-description = En-/Disables the damage-warp-cooldown.

#ConfigDamageCooldownPlayer:
damageCooldown-description = En-/Disables if the damage-warp-cooldown only activates when a player hits another player.

#ConfigHasRequestCooldown:
hasRequestCooldown-description = En-/Disables a cooldown for requesting warps.

#ConfigReload:
cReload-description = Reloads the config.yml.
reloadConfirm = Config.yml &areloaded.

#ConfigSetCooldown:
setCooldown-description = Sets the cooldown-time of the Warp-cooldown.
setCooldownConfirm = Warp-cooldown is now set to &b{0} &rseconds. # 0 -> set cooldown-time (cooldown)

#ConfigSetDamageCooldown:
setDamageCooldown-description = Sets the cooldown-time of the Damage-cooldown.
setDamageCooldownConfirm = Damage-warp-cooldown is now set to &b{0} &rseconds. # 0 -> set cooldown-time (cooldown)

#ConfigSetRequestCooldown:
setRequestCooldown-description = Sets the cooldown-time of the Request-cooldown.
setWarpCooldownConfirm = Request-warp-cooldown is now set to &b{0} &rseconds. # 0 -> set cooldown-time (cooldown)

#ConfigWarpAnimationType:
animationType-description = Sets the warp-animation to the given one.
invalidAnimationType = &cNo valid animation-type!
setAnimationTypeConfirm = Warp-animation is now set to animation &b{0}&r. # 0 -> type.toUpperCase()
provideAnimationType = &cPlease provide an animation-type!

#ConfigWarpClear:
allowClearing-description = Allows/Not allows players to delete all their warps at once.

#ConfigWarpCooldown:
enableWarpCooldown-description = En-/Disables the warp-cooldown.

#ConfigWarpDelete:
allowWarpDeleting-description = Allows/Not allows players to delete their warps.

#ConfigWarpDescribe:
cWarpDescribe-description = Allows/Not allows players to describe their warps again after initializing.

#ConfigWarpHandOver:
cWarpHandover-description = Allows/Not allows players to give other players the ownership of a warp.

#ConfigWarpInfo:
cWarpInfo-description = Allows/Not allows players to get information about warps.

#ConfigWarpList:
cWarpList-description = Allows/Not allows players to list all their warps and all the public ones of other players.

#ConfigWarpMax:
cWarpMaxCommand-description = En-/Disables a maximum amount of warps players can have.

#ConfigWarpMaxWarps:
cWarpMaxWarp-description = Sets the maximum warp-amount a player can have.
maxWarpsDisabled = &cenable-max-player-warps is disabled in the config.yml! So you cannot set a warp-maximum!
maxWarpsSetConfirm = New warp-amount is &b{0}&r. # 0 -> amount
provideMaxAmount = &cPlease provide a maximum amount!

#ConfigWarpParticleColor:
cWarpPColour-description = Sets the color of the warp animation to the given one.
setParticleColorConfirm = Particle-color set to &b{0}&r. # 0 -> color.toUpperCase()
provideColor = &cPlease provide a color.

#ConfigWarpPrivate:
cWarpPrivate-description = Allows/Not allows players to have private warps. (Existing warps will not be affected)

#ConfigWarpPublic:
cWarpPublic-description = Allows/Not allows players to have public warps. (Existing warps will not be affected)

#ConfigWarpRename:
cWarpRename-description = Allows/Not allows players to rename their warps.

#ConfigWarpRequest:
cWarpRequest-description = Allows/Not allows players to request the ownership of another player's warp.

#ConfigWarpSound:
cWarpSound-description = Sets the warp-sound to the given one.
incorrectSound = &cIncorrect sound!
setSoundConfirm = Warp-sound is now set to sound &b{0}&r. # 0 -> teleportSound
provideSound = &cPlease provide a sound!

#ConfigWarpUpdate:
cUpdate-description = Allows/Not allows players to set the location of their warps anew.

#Warp Subcommands
warpDoesNotExistError = &cThis warp does not exist.
warpsSubUsage = Use: &b{0}&r. #0 -> getUsage()
ownerNotOnline = &cThe owner is not online at the moment.
warpIsPrivate = This warp is &cprivate &r.
playerNotOnline = &cThis player is not online at the moment.
updatePrivate = &cprivate
updatePublic = &apublic
noAnimationProvidedInConfig = No animation provided in the config.yml!!!
tryAgain = &cPlease try again.

#DeleteWarp:
delete-description = Deletes the given warp.
onlyOwnerCanDelete = &cWarps can only be deleted by their owner.
askToDelete = To delete this warp you have to ask &b{0}&r. # 0 -> warp.getOwner().getName()
provideWarpToDelete = &cPlease provide a warp to delete.
deleteSuccess = &cRemoved &rwarp &b{0}&r. # 0 -> warp.getName()

#HandoverRequest:
handoverRequest-description = Sends a request for a handover of this warp to its owner.
cannotSendRequestToSelf = &cYou cannot send a request to yourself.
cannotRequestPrivateWarp = &cYou cannot request a private warp!
provideWarpToHandoverRequest = &cPlease provide a warp to request.
handOverMessage = Click if you want to 
handoverAccept = &naccept
handoverAcceptHover = &aHand over the ownership.
handoverReject = &nreject
handoverRejectHover = &cReject the request.
handoverRequestCooldown = &cYou can send a request again in &9{0} &rseconds. # 0 -> cooldown - elapsed
requestTitle = &aWarpsAndHomes-Request&r
requestYourWarps = &8{0} &r requests your warp: {1}&r. # 0 -> player.getName(), 1 -> warp.getName()
requestWasSent = &aRequest &r was sent to {0}&r. # 0 -> warpOwner.getName()

#SetWarp:
set-description = Sets a warp at your location.
maxWarpsReached = &cYou have reached your maximum amount of &b{0} &cwarps&r. # 0 -> WarpsAndHomes.getPlugin().getConfig().get("max-player-warps")
deleteSomeWarps = Please delete some warps before you can set new ones.
warpAlreadyOwned = This warp is already owned by &b{0}&r. # 0 -> warpFile.getWarp(name).getOwner().getName()
savedWarp = Saved warp &b{0}&r. # 0 -> name
warpsLeft = You have &b{0} &r warps left to set. # 0 -> (WarpsAndHomes.getPlugin().getConfig().getLong("max-player-warps") - warpFile.getWarps(player).size())
provideMoreArgs = &cPlease provide more arguments!
defaultWarpDescription = &7No description specified.
onlyOnePublicModifier = &cONLY ONE PUBLIC MODIFIER IS ALLOWED TO BE FALSE!
privateWarpsDisabled = &cPrivate warps are disabled!
publicWarpsDisabled = &cPublic warps are disabled!

#WarpClear:
clear-description = Deletes all your warps.
clearSuccess = &cCleared &rwarp &c{0}&r. # 0 -> warp.getName()
clearFinished = &aFinished clearing!

#WarpDescribe:
describe-description = Sets the given description to the given warp.
onlyOwnerCanDescribe = &cWarps can only be described by their owner.
askOwnerToDescribe = Ask &b{0} &rto set a description for this warp. # 0 -> warp.getOwner().getName()
provideDescription = &cPlease provide a description.
descriptionSet = Description of warp &b{0} &ris now &7{1}&r. # 0 -> warp.getName(), 1 -> description

#WarpHandover:
handover-description = Changes the owner of the given warp to the given owner.
success = &b{0} &ris now handed over to &8{1}r. # 0 ->warp.getName(), 1 ->  newOwner.getName()
provideArgs = &cPlease provide a warp to hand over.
provideOwner = &cPlease provide a owner to hand over to.
onlyByOwner = &cWarps can only be handed over by their owner.
ask = Ask &b{0} &rto hand this warp over. # 0 -> test.getOwner().getName()
handoverNewOwner = &8{0} &rjust gave you the ownership of the warp &b {1}&r. # 0 -> player.getName(), 1 -> warp.getName()

#WarpInfo:
info-description = Gives you some information about the given warp.
provideWarpToInfo = &cPlease provide a warp to show the information of.
infoName = &6Name: &r{0} # 0 -> name
infoLocation = &6Location: &r
infoOwner = &6Owner: &r{0} # 0 -> owner
dimension = &6Dimension: &r{0} # 0 -> world
lastSeen = &6Owner last seen: &r{0} # 0 -> date
publicInfo = &6Public: &r{0} # 0 -> yes/no
listingDescription = &6Description: &r{0} # 0 -> description

#WarpList:
list-description = Shows a list of all your warps.
format = {0} &7- &r{1} &7- {2} # 0 -> name, 1 -> dimension, 2 -> public/private

#WarpUnlock:
unlock-description = Sets the given warp to &apublic&r.
onlyOwnerCanSetPublic = &cWarps can only be set to public by their owner.
askOwnerToSetPublic = Ask &b{0} &rto set this warp to public. # 0 -> warp.getOwner().getName()
provideWarpToSetPublic = &cPlease provide a warp to set public.
alreadyPublic = This warp is already &apublic.
setPublicSuccess = This warp is now &apublic.

#WarpLock:
lock-description = Sets the given warp to &cprivate&r.
onlyOwnerCanSetPrivate = &cWarps can only be set to private by their owner.
askOwnerToSetPrivate = Ask &b{0} &rto set this warp to private. # 0 -> warp.getOwner().getName()
provideWarpToSetPrivate = &cPlease provide a warp to set private.
alreadyPrivate = This warp is already &cprivate.
setPrivateSuccess = This warp is now &cprivate.

#WarpToWarp:
wTwDesc = Warps you to the given warp.
wTwPrivateOtherOwner = This warp is &cprivate &rand owned by &b{0}&r. # 0 -> warp.getOwner().getName()
wTwSuccess = Warped you to &b{0}&r. # 0 ->warp.getName()
wTwProvide = &cPlease provide a warp.
wTwNoOtherDimensionWarping = &cYou can not warp to a warp that is in another dimension.
wTwCooldownMessage = You can warp again in &b{0} &rseconds. # 0 -> timeLestS

#WarpRename:
rename-description = Renames the given warp.
onlyOwnerCanRename = &cWarps can only be renamed by their owner.
askOwnerToRename = Ask &b{0} &rto rename this warp. # 0 -> warp.getOwner().getName()
provideWarpToRename = &cPlease provide a warp to rename.
renameSuccess = Renamed warp &b{0} &rto &b{1}&r. # 0 -> warp.getName(), 1 -> name
provideNewName = &cPlease provide a new name for the warp.

#WarpUpdate:
update-description = Updates the location of the given warp to your current position.
onlyOwnerCanUpdate = &cWarps can only be updated by their owner.
askOwnerToUpdate = Ask &b{0} &rto update this warp. #0 -> warp.getOwner().getName()
provideWarpToUpdate = &cPlease provide a warp to update.
updateSuccess = Updated warp &b{0}&r. # 0 -> warp.getName()

#ConfigCommandManager:
noPermission = You do not have permission to execute this command!
provideArguments = Please provide more arguments to use that command!

#OpenMenu:
bePlayer = You have to be a player to open a menu!
menu-disabled = &8This was disabled by an operator.

#AcceptRequest:
acceptDesc = Accepts to hand the ownership of a warp over to another player.
acceptNotOfOtherPeople = You can not accept the requests of other people!
acceptProvideName = &cPlease provide a name for the warp you want to hand over.
acceptProvideRequester = &cPlease provide a name for the requester you want to hand over to and a warp.
acceptRequestAlreadyAnswered = &cThis request is already answered.

#RejectRequest:
rejectDesc = Rejects to hand the ownership of a warp over to another player.
rejectNotRejectOfOtherPeople = &cYou can not reject the requests of other people!
rejectProvideRequester = &cPlease provide a name for the requester you want to reject and a warp.
rejectProvideName = &cPlease provide a name for the warp you want to reject.
rejectSuccess = &cRejected &rthe request of &8{0} &r. # 0 -> requester.getName()
rejectRequestorMessage = &8{0} &crejected &ryour request for {1}. # 0 -> owner.getName(), 1 -> warp.getName()
rejectAlreadyAnswered = &cThis request is already answered.